@page "/"
@using System.Text.Json;
@using PrismJsStuff.Data;
@inject IJSRuntime JS;
@inject TextService text;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<div class="mb-3">
	<button type="button" class="btn btn-primary" @onclick="SetJson1">
		Set Json 1
	</button>
	<button type="button" class="btn btn-secondary" @onclick="SetJson2">
		Set Json 2
	</button>
</div>

<div class="mb-3">
	<button type="button" class="btn btn-primary" @onclick="SetJs1">
		Set Javascript 1
	</button>
	<button type="button" class="btn btn-primary" @onclick="SetJs2">
		Set Javascript 2
	</button>
</div>


@if(exampleJson.Value != null){
	<pre class="language-json"><code class="language-json">@exampleJson</code></pre>
}


@code {
	private MarkupString exampleJson;

	public async Task SetJson1()
	{
		const string language = "json";
		string code = await JS.InvokeAsync<string>("prettify.json", text.Json1);
		code = await JS.InvokeAsync<string>("highlight", code, language);
		this.exampleJson = code.ToMarkupString();
	}

	public async Task SetJson2()
	{
		const string language = "json";
		string code = await JS.InvokeAsync<string>("prettify.json", text.Json2);
		code = await JS.InvokeAsync<string>("highlight", code, language);
		this.exampleJson = code.ToMarkupString();
	}

	public async Task SetJs1()
	{
		//exampleJson = await PrettifyJson(SS.Json2);
		const string language = "js";
		string code = await JS.InvokeAsync<string>("prettify.js", text.Js1);
		code = await JS.InvokeAsync<string>("highlight", code, language);
		this.exampleJson = code.ToMarkupString();
	}
	public async Task SetJs2()
	{
		//exampleJson = await PrettifyJson(SS.Json2);
		const string language = "js";
		string code = await JS.InvokeAsync<string>("prettify.js", text.Js2);
		code = await JS.InvokeAsync<string>("highlight", code, language);
		this.exampleJson = code.ToMarkupString();
	}


	private async Task<string> Prettify(string code)
	{
		return await JS.InvokeAsync<string>("prettify.json", code);
	}

	private async Task<string> Highlight(string code, string language)
	{
		return await JS.InvokeAsync<string>("highlight", code, language);
	}

	private async Task<string> TranslateCode(string code, string language)
	{
		code = await Prettify(code);
		code = await Highlight(code, language);
		return code;
	}

	private async Task<MarkupString> PrettifyJson(string json)
	{
		// Cheaty way to format json
		using var jDoc = JsonDocument.Parse(json);
		var prettyJson = JsonSerializer.Serialize(jDoc,
			new JsonSerializerOptions
				{
					WriteIndented = true
				});


		return new MarkupString(await JS.InvokeAsync<string>("highlight", prettyJson, "json"));
	}
}
